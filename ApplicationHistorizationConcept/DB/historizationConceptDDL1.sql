-- Run next 1 statement with SYS user; needed the start_scn from v$transaction because is a sequence number that gets incremenented only once per transaction, so will assure the version intervals intersection for 2 different tables;
--GRANT SELECT ON v_$transaction TO hr;
--grant execute on dbms_lock to hr

-- Disable HR default trigger for job_id and department_id history
ALTER TRIGGER UPDATE_JOB_HISTORY DISABLE;

/

CREATE OR REPLACE TRIGGER UPDATE_EMPLOYEES_HIST 
AFTER UPDATE OF DEPARTMENT_ID, LAST_NAME ON EMPLOYEES 
FOR EACH ROW 
DECLARE
V_START BINARY_DOUBLE :=0;
V_END BINARY_DOUBLE :=0;
BEGIN
  SELECT MAX(VERSION_END) INTO V_START FROM EMPLOYEES_HIST WHERE EMPLOYEE_ID=:OLD.EMPLOYEE_ID;
  V_START :=NVL(V_START,0);
  SELECT MAX(start_scn) INTO V_END FROM v$transaction;
  if(V_START<>V_END)THEN
  INSERT INTO EMPLOYEES_HIST (EMPLOYEE_ID,DEPARTMENT_ID,LAST_NAME,LAST_CHANGE_DATE,LAST_CHANGE_USER,VERSION_START,VERSION_END) VALUES(:OLD.EMPLOYEE_ID,:OLD.DEPARTMENT_ID,:OLD.LAST_NAME,:OLD.LAST_CHANGE_DATE,:OLD.LAST_CHANGE_USER,V_START,V_END);
  END IF;
  
  
END;

/


CREATE OR REPLACE VIEW EMPLOYEES_HIST1 AS
SELECT 
TO_BINARY_DOUBLE(NVL(versions_startscn,0)) AS s,
TO_BINARY_DOUBLE(NVL(versions_endscn,binary_double_infinity)) AS e,
EMPLOYEES.*
FROM 
EMPLOYEES VERSIONS BETWEEN SCN MINVALUE AND MAXVALUE 

/ 

CREATE OR REPLACE VIEW EMPLOYEES_HIST2 AS
SELECT 
NVL((SELECT MAX(VERSION_END) FROM EMPLOYEES_HIST WHERE EMPLOYEE_ID=t.EMPLOYEE_ID),0) AS s,
binary_double_infinity AS e,
t.EMPLOYEE_ID,
t.FIRST_NAME,
t.LAST_NAME,
t.EMAIL,
t.PHONE_NUMBER,
t.HIRE_DATE,
t.JOB_ID,
t.SALARY,
t.COMMISSION_PCT,
t.MANAGER_ID,
t.DEPARTMENT_ID,
t.LAST_CHANGE_DATE,
t.LAST_CHANGE_USER
FROM 
EMPLOYEES t
UNION ALL
SELECT 
h.VERSION_START AS s,
h.VERSION_END AS e,
t.EMPLOYEE_ID,
t.FIRST_NAME,
h.LAST_NAME,
t.EMAIL,
t.PHONE_NUMBER,
t.HIRE_DATE,
t.JOB_ID,
t.SALARY,
t.COMMISSION_PCT,
t.MANAGER_ID,
h.DEPARTMENT_ID,
h.LAST_CHANGE_DATE,
h.LAST_CHANGE_USER
FROM 
EMPLOYEES t,
EMPLOYEES_HIST h
WHERE t.EMPLOYEE_ID=h.EMPLOYEE_ID;

/

CREATE OR REPLACE TRIGGER UPDATE_JOBS_HIST 
AFTER UPDATE OF JOB_TITLE ON JOBS 
FOR EACH ROW 
DECLARE
V_START BINARY_DOUBLE :=0;
V_END BINARY_DOUBLE :=0;
BEGIN
  SELECT MAX(VERSION_END) INTO V_START FROM JOBS_HIST WHERE JOB_ID=:OLD.JOB_ID;
  V_START :=NVL(V_START,0);
  SELECT MAX(start_scn) INTO V_END FROM v$transaction;
  if(V_START<>V_END)THEN
  INSERT INTO JOBS_HIST (JOB_ID,JOB_TITLE,LAST_CHANGE_DATE,LAST_CHANGE_USER,VERSION_START,VERSION_END) VALUES(:OLD.JOB_ID,:OLD.JOB_TITLE,:OLD.LAST_CHANGE_DATE,:OLD.LAST_CHANGE_USER,V_START,V_END);
  END IF;
END;

/

CREATE OR REPLACE VIEW JOBS_HIST1 AS
SELECT 
TO_BINARY_DOUBLE(NVL(versions_startscn,0)) AS s,
TO_BINARY_DOUBLE(NVL(versions_endscn,binary_double_infinity)) AS e,
JOBS.*
FROM 
JOBS VERSIONS BETWEEN SCN MINVALUE AND MAXVALUE 

/ 

CREATE OR REPLACE VIEW JOBS_HIST2 AS
SELECT 
NVL((SELECT MAX(VERSION_END) FROM JOBS_HIST WHERE JOB_ID=t.JOB_ID),0) AS s,
binary_double_infinity AS e,
t.JOB_ID,
t.JOB_TITLE,
t.MIN_SALARY,
t.MAX_SALARY,
t.LAST_CHANGE_DATE,
t.LAST_CHANGE_USER
FROM 
JOBS t
UNION ALL
SELECT 
h.VERSION_START AS s,
h.VERSION_END AS e,
t.JOB_ID,
h.JOB_TITLE,
t.MIN_SALARY,
t.MAX_SALARY,
h.LAST_CHANGE_DATE,
h.LAST_CHANGE_USER
FROM 
JOBS t,
JOBS_HIST h
WHERE t.JOB_ID=h.JOB_ID;

/



CREATE OR REPLACE TRIGGER UPDATE_DEPARTMENTS_HIST 
AFTER UPDATE OF DEPARTMENT_NAME ON DEPARTMENTS 
FOR EACH ROW 
DECLARE
V_START BINARY_DOUBLE :=0;
V_END BINARY_DOUBLE :=0;
BEGIN
  SELECT MAX(VERSION_END) INTO V_START FROM DEPARTMENTS_HIST WHERE DEPARTMENT_ID=:OLD.DEPARTMENT_ID;
  V_START :=NVL(V_START,0);
  SELECT MAX(start_scn) INTO V_END FROM v$transaction;
  if(V_START<>V_END)THEN
  INSERT INTO DEPARTMENTS_HIST (DEPARTMENT_ID,DEPARTMENT_NAME,LAST_CHANGE_DATE,LAST_CHANGE_USER,VERSION_START,VERSION_END) VALUES(:OLD.DEPARTMENT_ID,:OLD.DEPARTMENT_NAME,:OLD.LAST_CHANGE_DATE,:OLD.LAST_CHANGE_USER,V_START,V_END);
  END IF;
END;

/

CREATE OR REPLACE VIEW DEPARTMENTS_HIST1 AS
SELECT 
TO_BINARY_DOUBLE(NVL(versions_startscn,0)) AS s,
TO_BINARY_DOUBLE(NVL(versions_endscn,binary_double_infinity)) AS e,
DEPARTMENTS.*
FROM 
DEPARTMENTS VERSIONS BETWEEN SCN MINVALUE AND MAXVALUE 

/


CREATE OR REPLACE VIEW DEPARTMENTS_HIST2  AS 
SELECT 
NVL((SELECT MAX(VERSION_END) FROM DEPARTMENTS_HIST WHERE DEPARTMENT_ID=t.DEPARTMENT_ID),0) AS s,
binary_double_infinity AS e,
t.DEPARTMENT_ID,
t.DEPARTMENT_NAME,
t.MANAGER_ID,
t.LOCATION_ID,
t.LAST_CHANGE_DATE,
t.LAST_CHANGE_USER
FROM DEPARTMENTS t
UNION ALL 
SELECT 
h.VERSION_START AS s,
h.VERSION_END AS e,
t.DEPARTMENT_ID,
h.DEPARTMENT_NAME,
t.MANAGER_ID,
t.LOCATION_ID,
h.LAST_CHANGE_DATE,
h.LAST_CHANGE_USER
FROM DEPARTMENTS t, DEPARTMENTS_HIST h
WHERE t.DEPARTMENT_ID=h.DEPARTMENT_ID;

/

CREATE OR REPLACE VIEW EMPLOYEES_DETAIL_HIST1 AS
SELECT 
  CASE
  WHEN t1.LAST_CHANGE_DATE>=t2.LAST_CHANGE_DATE AND t1.LAST_CHANGE_DATE>=t3.LAST_CHANGE_DATE THEN t1.LAST_CHANGE_DATE
  WHEN t2.LAST_CHANGE_DATE>=t1.LAST_CHANGE_DATE AND t2.LAST_CHANGE_DATE>=t3.LAST_CHANGE_DATE THEN t2.LAST_CHANGE_DATE
  ELSE t3.LAST_CHANGE_DATE
  END LAST_CHANGE_DATE,
  CASE
  WHEN t1.e = BINARY_DOUBLE_INFINITY AND t2.e = BINARY_DOUBLE_INFINITY AND t3.e = BINARY_DOUBLE_INFINITY THEN '1'
  ELSE '0'
  END IS_LAST,
  t1.EMPLOYEE_ID,
  t1.FIRST_NAME,
  t1.LAST_NAME,
  t2.JOB_ID,
  t2.JOB_TITLE,
  t3.DEPARTMENT_ID,
  t3.DEPARTMENT_NAME
FROM
  EMPLOYEES_HIST1 t1,
  JOBS_HIST1 t2,
  DEPARTMENTS_HIST1 t3
WHERE t1.JOB_ID = t2.JOB_ID
AND t1.DEPARTMENT_ID = t3.DEPARTMENT_ID
AND (t1.s=t1.e OR t2.s=t2.e OR (t1.s=t2.s AND t1.e=t2.e) OR (t2.s < t1.e AND t2.e > t1.s) OR (t1.s < t2.e AND t1.e > t2.s))
AND (t1.s=t1.e OR t3.s=t3.e OR (t1.s=t3.s AND t1.e=t3.e) OR (t3.s < t1.e AND t3.e > t1.s) OR (t1.s < t3.e AND t1.e > t3.s))
AND (t2.s=t2.e OR t3.s=t3.e OR (t2.s=t3.s AND t2.e=t3.e) OR (t3.s < t2.e AND t3.e > t2.s) OR (t2.s < t3.e AND t2.e > t3.s))
ORDER BY IS_LAST DESC, LAST_CHANGE_DATE DESC

/


CREATE OR REPLACE VIEW EMPLOYEES_DETAIL_HIST2 AS
SELECT 
  CASE
  WHEN t1.LAST_CHANGE_DATE>=t2.LAST_CHANGE_DATE AND t1.LAST_CHANGE_DATE>=t3.LAST_CHANGE_DATE THEN t1.LAST_CHANGE_DATE
  WHEN t2.LAST_CHANGE_DATE>=t1.LAST_CHANGE_DATE AND t2.LAST_CHANGE_DATE>=t3.LAST_CHANGE_DATE THEN t2.LAST_CHANGE_DATE
  ELSE t3.LAST_CHANGE_DATE
  END LAST_CHANGE_DATE,
  CASE
  WHEN t1.e = BINARY_DOUBLE_INFINITY AND t2.e = BINARY_DOUBLE_INFINITY AND t3.e = BINARY_DOUBLE_INFINITY THEN '1'
  ELSE '0'
  END IS_LAST,
  t1.EMPLOYEE_ID,
  t1.FIRST_NAME,
  t1.LAST_NAME,
  t2.JOB_ID,
  t2.JOB_TITLE,
  t3.DEPARTMENT_ID,
  t3.DEPARTMENT_NAME
FROM
  EMPLOYEES_HIST2 t1,
  JOBS_HIST2 t2,
  DEPARTMENTS_HIST2 t3
WHERE t1.JOB_ID = t2.JOB_ID
AND t1.DEPARTMENT_ID = t3.DEPARTMENT_ID
AND (t1.s=t1.e OR t2.s=t2.e OR (t1.s=t2.s AND t1.e=t2.e) OR (t2.s < t1.e AND t2.e > t1.s) OR (t1.s < t2.e AND t1.e > t2.s))
AND (t1.s=t1.e OR t3.s=t3.e OR (t1.s=t3.s AND t1.e=t3.e) OR (t3.s < t1.e AND t3.e > t1.s) OR (t1.s < t3.e AND t1.e > t3.s))
AND (t2.s=t2.e OR t3.s=t3.e OR (t2.s=t3.s AND t2.e=t3.e) OR (t3.s < t2.e AND t3.e > t2.s) OR (t2.s < t3.e AND t2.e > t3.s))
ORDER BY IS_LAST DESC, LAST_CHANGE_DATE DESC

/
