grant select on v_$transaction to hr;

CREATE TABLE EMPLOYEES_HIST(
EMPLOYEE_ID   NUMBER(6,0) NOT NULL ENABLE,
LAST_NAME     VARCHAR2(25 BYTE) NOT NULL ENABLE,
VERSION_START NUMBER(20,0) DEFAULT 0 NOT NULL ENABLE,
VERSION_END   NUMBER(20,0) DEFAULT 0 NOT NULL ENABLE,
CONSTRAINT EMPLOYEES_HIST_PK PRIMARY KEY (EMPLOYEE_ID, VERSION_END)
);

/

ALTER TABLE EMPLOYEES_HIST ADD (JOB_ID VARCHAR2(10 BYTE) NOT NULL);


/

CREATE OR REPLACE TRIGGER UPDATE_EMPLOYEES_HIST 
AFTER UPDATE OF JOB_ID, LAST_NAME ON EMPLOYEES 
FOR EACH ROW 
DECLARE
V_START NUMBER :=0;
V_END NUMBER :=0;
BEGIN
  SELECT NVL(MAX(VERSION_END),0) INTO V_START FROM EMPLOYEES_HIST WHERE EMPLOYEE_ID=:OLD.EMPLOYEE_ID;
  SELECT start_scn INTO V_END FROM v$transaction;
  if(V_START<>V_END)THEN
  INSERT INTO EMPLOYEES_HIST (EMPLOYEE_ID,JOB_ID,LAST_NAME,VERSION_START,VERSION_END) VALUES(:OLD.EMPLOYEE_ID,:OLD.JOB_ID,:OLD.LAST_NAME,V_START,V_END);
  END IF;
  
  
END;

/


CREATE OR REPLACE VIEW EMPLOYEES_HIST1 AS
SELECT 
NVL(versions_startscn,0) AS s,
NVL(versions_endscn,binary_double_infinity) AS e,
EMPLOYEES.*
FROM 
EMPLOYEES VERSIONS BETWEEN SCN MINVALUE AND MAXVALUE 

/ 

CREATE OR REPLACE VIEW EMPLOYEES_HIST2 AS
SELECT 
NVL((SELECT MAX(VERSION_END) FROM EMPLOYEES_HIST WHERE EMPLOYEE_ID=t.EMPLOYEE_ID),0) AS s,
binary_double_infinity AS e,
t.EMPLOYEE_ID,
t.FIRST_NAME,
t.LAST_NAME,
t.EMAIL,
t.PHONE_NUMBER,
t.HIRE_DATE,
t.JOB_ID,
t.SALARY,
t.COMMISSION_PCT,
t.MANAGER_ID,
t.DEPARTMENT_ID
FROM 
EMPLOYEES t
UNION
SELECT 
h.VERSION_START AS s,
h.VERSION_END AS e,
t.EMPLOYEE_ID,
t.FIRST_NAME,
h.LAST_NAME,
t.EMAIL,
t.PHONE_NUMBER,
t.HIRE_DATE,
h.JOB_ID,
t.SALARY,
t.COMMISSION_PCT,
t.MANAGER_ID,
t.DEPARTMENT_ID
FROM 
EMPLOYEES t,
EMPLOYEES_HIST h
WHERE t.EMPLOYEE_ID=h.EMPLOYEE_ID;

/

CREATE TABLE JOBS_HIST(
JOB_ID        VARCHAR2(10 BYTE) NOT NULL ENABLE,
JOB_TITLE     VARCHAR2(35 BYTE) NOT NULL ENABLE,
VERSION_START NUMBER(20,0) DEFAULT 0 NOT NULL ENABLE,
VERSION_END   NUMBER(20,0) DEFAULT 0 NOT NULL ENABLE,
CONSTRAINT JOBS_HIST_PK PRIMARY KEY (JOB_ID, VERSION_END)
);

/

CREATE OR REPLACE TRIGGER UPDATE_JOBS_HIST 
AFTER UPDATE OF JOB_TITLE ON JOBS 
FOR EACH ROW 
DECLARE
V_START NUMBER :=0;
V_END NUMBER :=0;
BEGIN
  SELECT NVL(MAX(VERSION_END),0) INTO V_START FROM JOBS_HIST WHERE JOB_ID=:OLD.JOB_ID;
  SELECT start_scn INTO V_END FROM v$transaction;
  if(V_START<>V_END)THEN
  INSERT INTO JOBS_HIST (JOB_ID,JOB_TITLE,VERSION_START,VERSION_END) VALUES(:OLD.JOB_ID,:OLD.JOB_TITLE,V_START,V_END);
  END IF;
END;

/

CREATE OR REPLACE VIEW JOBS_HIST1 AS
SELECT 
NVL(versions_startscn,0) AS s,
NVL(versions_endscn,binary_double_infinity) AS e,
JOBS.*
FROM 
JOBS VERSIONS BETWEEN SCN MINVALUE AND MAXVALUE 

/ 

CREATE OR REPLACE VIEW JOBS_HIST2 AS
SELECT 
NVL((SELECT MAX(VERSION_END) FROM JOBS_HIST WHERE JOB_ID=t.JOB_ID),0) AS s,
binary_double_infinity AS e,
t.JOB_ID,
t.JOB_TITLE,
t.MIN_SALARY,
t.MAX_SALARY
FROM 
JOBS t
UNION
SELECT 
h.VERSION_START AS s,
h.VERSION_END AS e,
t.JOB_ID,
h.JOB_TITLE,
t.MIN_SALARY,
t.MAX_SALARY
FROM 
JOBS t,
JOBS_HIST h
WHERE t.JOB_ID=h.JOB_ID;

/

CREATE TABLE DEPARTMENTS_HIST(
DEPARTMENT_ID   NUMBER(4,0) NOT NULL ENABLE,
DEPARTMENT_NAME VARCHAR2(30 BYTE) NOT NULL ENABLE,
VERSION_START   NUMBER(20,0) DEFAULT 0 NOT NULL ENABLE,
VERSION_END     NUMBER(20,0) DEFAULT 0 NOT NULL ENABLE,
CONSTRAINT DEPARTMENTS_HIST_PK PRIMARY KEY (DEPARTMENT_ID, VERSION_END)
);

/

CREATE OR REPLACE TRIGGER UPDATE_DEPARTMENTS_HIST 
AFTER UPDATE OF DEPARTMENT_NAME ON DEPARTMENTS 
FOR EACH ROW 
DECLARE
V_START NUMBER :=0;
V_END NUMBER :=0;
BEGIN
  SELECT NVL(MAX(VERSION_END),0) INTO V_START FROM DEPARTMENTS_HIST WHERE DEPARTMENT_ID=:OLD.DEPARTMENT_ID;
  SELECT start_scn INTO V_END FROM v$transaction;
  if(V_START<>V_END)THEN
  INSERT INTO DEPARTMENTS_HIST (DEPARTMENT_ID,DEPARTMENT_NAME,VERSION_START,VERSION_END) VALUES(:OLD.DEPARTMENT_ID,:OLD.DEPARTMENT_NAME,V_START,V_END);
  END IF;
END;

/

CREATE OR REPLACE VIEW DEPARTMENTS_HIST1 AS
SELECT 
NVL(versions_startscn,0) AS s,
NVL(versions_endscn,binary_double_infinity) AS e,
DEPARTMENTS.*
FROM 
DEPARTMENTS VERSIONS BETWEEN SCN MINVALUE AND MAXVALUE 

/


CREATE OR REPLACE VIEW DEPARTMENTS_HIST2  AS 
SELECT 
NVL((SELECT MAX(VERSION_END) FROM DEPARTMENTS_HIST WHERE DEPARTMENT_ID=t.DEPARTMENT_ID),0) AS s,
binary_double_infinity AS e,
t.DEPARTMENT_ID,
t.DEPARTMENT_NAME,
t.MANAGER_ID,
t.LOCATION_ID
FROM DEPARTMENTS t
UNION 
SELECT 
h.VERSION_START AS s,
h.VERSION_END AS e,
t.DEPARTMENT_ID,
h.DEPARTMENT_NAME,
t.MANAGER_ID,
t.LOCATION_ID
FROM DEPARTMENTS t, DEPARTMENTS_HIST h
WHERE t.DEPARTMENT_ID=h.DEPARTMENT_ID;

/