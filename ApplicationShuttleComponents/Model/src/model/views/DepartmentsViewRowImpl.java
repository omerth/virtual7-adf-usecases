package model.views;

import model.entities.DepartmentsImpl;

import oracle.jbo.RowIterator;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 20 18:01:40 EEST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DepartmentsViewRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        DepartmentId {
            public Object get(DepartmentsViewRowImpl obj) {
                return obj.getDepartmentId();
            }

            public void put(DepartmentsViewRowImpl obj, Object value) {
                obj.setDepartmentId((DBSequence)value);
            }
        }
        ,
        DepartmentName {
            public Object get(DepartmentsViewRowImpl obj) {
                return obj.getDepartmentName();
            }

            public void put(DepartmentsViewRowImpl obj, Object value) {
                obj.setDepartmentName((String)value);
            }
        }
        ,
        ManagerId {
            public Object get(DepartmentsViewRowImpl obj) {
                return obj.getManagerId();
            }

            public void put(DepartmentsViewRowImpl obj, Object value) {
                obj.setManagerId((Number)value);
            }
        }
        ,
        LocationId {
            public Object get(DepartmentsViewRowImpl obj) {
                return obj.getLocationId();
            }

            public void put(DepartmentsViewRowImpl obj, Object value) {
                obj.setLocationId((Number)value);
            }
        }
        ,
        Deleted {
            public Object get(DepartmentsViewRowImpl obj) {
                return obj.getDeleted();
            }

            public void put(DepartmentsViewRowImpl obj, Object value) {
                obj.setDeleted((Number)value);
            }
        }
        ,
        ViewAttr {
            public Object get(DepartmentsViewRowImpl obj) {
                return obj.getViewAttr();
            }

            public void put(DepartmentsViewRowImpl obj, Object value) {
                obj.setViewAttr((String)value);
            }
        }
        ,
        EmployeesView {
            public Object get(DepartmentsViewRowImpl obj) {
                return obj.getEmployeesView();
            }

            public void put(DepartmentsViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(DepartmentsViewRowImpl object);

        public abstract void put(DepartmentsViewRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DEPARTMENTID = AttributesEnum.DepartmentId.index();
    public static final int DEPARTMENTNAME = AttributesEnum.DepartmentName.index();
    public static final int MANAGERID = AttributesEnum.ManagerId.index();
    public static final int LOCATIONID = AttributesEnum.LocationId.index();
    public static final int DELETED = AttributesEnum.Deleted.index();
    public static final int VIEWATTR = AttributesEnum.ViewAttr.index();
    public static final int EMPLOYEESVIEW = AttributesEnum.EmployeesView.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DepartmentsViewRowImpl() {
    }

    /**
     * Gets Departments entity object.
     * @return the Departments
     */
    public DepartmentsImpl getDepartments() {
        return (DepartmentsImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for DEPARTMENT_ID using the alias name DepartmentId.
     * @return the DEPARTMENT_ID
     */
    public DBSequence getDepartmentId() {
        return (DBSequence)getAttributeInternal(DEPARTMENTID);
    }

    /**
     * Sets <code>value</code> as attribute value for DEPARTMENT_ID using the alias name DepartmentId.
     * @param value value to set the DEPARTMENT_ID
     */
    public void setDepartmentId(DBSequence value) {
        setAttributeInternal(DEPARTMENTID, value);
    }

    /**
     * Gets the attribute value for DEPARTMENT_NAME using the alias name DepartmentName.
     * @return the DEPARTMENT_NAME
     */
    public String getDepartmentName() {
        return (String) getAttributeInternal(DEPARTMENTNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for DEPARTMENT_NAME using the alias name DepartmentName.
     * @param value value to set the DEPARTMENT_NAME
     */
    public void setDepartmentName(String value) {
        setAttributeInternal(DEPARTMENTNAME, value);
    }

    /**
     * Gets the attribute value for MANAGER_ID using the alias name ManagerId.
     * @return the MANAGER_ID
     */
    public Number getManagerId() {
        return (Number) getAttributeInternal(MANAGERID);
    }

    /**
     * Sets <code>value</code> as attribute value for MANAGER_ID using the alias name ManagerId.
     * @param value value to set the MANAGER_ID
     */
    public void setManagerId(Number value) {
        setAttributeInternal(MANAGERID, value);
    }

    /**
     * Gets the attribute value for LOCATION_ID using the alias name LocationId.
     * @return the LOCATION_ID
     */
    public Number getLocationId() {
        return (Number) getAttributeInternal(LOCATIONID);
    }

    /**
     * Sets <code>value</code> as attribute value for LOCATION_ID using the alias name LocationId.
     * @param value value to set the LOCATION_ID
     */
    public void setLocationId(Number value) {
        setAttributeInternal(LOCATIONID, value);
    }

    /**
     * Gets the attribute value for DELETED using the alias name Deleted.
     * @return the DELETED
     */
    public Number getDeleted() {
        return (Number) getAttributeInternal(DELETED);
    }

    /**
     * Sets <code>value</code> as attribute value for DELETED using the alias name Deleted.
     * @param value value to set the DELETED
     */
    public void setDeleted(Number value) {
        setAttributeInternal(DELETED, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ViewAttr.
     * @return the ViewAttr
     */
    public String getViewAttr() {
        return (String) getAttributeInternal(VIEWATTR);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ViewAttr.
     * @param value value to set the  ViewAttr
     */
    public void setViewAttr(String value) {
        setAttributeInternal(VIEWATTR, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link EmployeesView.
     */
    public RowIterator getEmployeesView() {
        return (RowIterator)getAttributeInternal(EMPLOYEESVIEW);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
