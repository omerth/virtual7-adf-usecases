package com.virtual7.entityValidaiton.model.entities;

import java.util.ArrayList;

import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Mar 23 12:35:42 EET 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EmployeesEOImpl extends EntityImpl {

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        EmployeeId {
            public Object get(EmployeesEOImpl obj) {
                return obj.getEmployeeId();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setEmployeeId((Number)value);
            }
        },
        FirstName {
            public Object get(EmployeesEOImpl obj) {
                return obj.getFirstName();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setFirstName((String)value);
            }
        },
        LastName {
            public Object get(EmployeesEOImpl obj) {
                return obj.getLastName();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setLastName((String)value);
            }
        },
        Email {
            public Object get(EmployeesEOImpl obj) {
                return obj.getEmail();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setEmail((String)value);
            }
        },
        PhoneNumber {
            public Object get(EmployeesEOImpl obj) {
                return obj.getPhoneNumber();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setPhoneNumber((String)value);
            }
        },
        HireDate {
            public Object get(EmployeesEOImpl obj) {
                return obj.getHireDate();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setHireDate((Date)value);
            }
        },
        JobId {
            public Object get(EmployeesEOImpl obj) {
                return obj.getJobId();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setJobId((String)value);
            }
        },
        Salary {
            public Object get(EmployeesEOImpl obj) {
                return obj.getSalary();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setSalary((Number)value);
            }
        },
        CommissionPct {
            public Object get(EmployeesEOImpl obj) {
                return obj.getCommissionPct();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setCommissionPct((Number)value);
            }
        },
        ManagerId {
            public Object get(EmployeesEOImpl obj) {
                return obj.getManagerId();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setManagerId((Number)value);
            }
        },
        DepartmentId {
            public Object get(EmployeesEOImpl obj) {
                return obj.getDepartmentId();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setDepartmentId((Number)value);
            }
        },
        emailsec {
            public Object get(EmployeesEOImpl obj) {
                return obj.getemailsec();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setemailsec((String)value);
            }
        },
        EmployeesEO {
            public Object get(EmployeesEOImpl obj) {
                return obj.getEmployeesEO();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        ManagerIdEmployeesEO {
            public Object get(EmployeesEOImpl obj) {
                return obj.getManagerIdEmployeesEO();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setManagerIdEmployeesEO((EmployeesEOImpl)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(EmployeesEOImpl object);

        public abstract void put(EmployeesEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    private static EntityDefImpl mDefinitionObject;
    public static final int EMPLOYEEID = AttributesEnum.EmployeeId.index();
    public static final int FIRSTNAME = AttributesEnum.FirstName.index();
    public static final int LASTNAME = AttributesEnum.LastName.index();
    public static final int EMAIL = AttributesEnum.Email.index();
    public static final int PHONENUMBER = AttributesEnum.PhoneNumber.index();
    public static final int HIREDATE = AttributesEnum.HireDate.index();
    public static final int JOBID = AttributesEnum.JobId.index();
    public static final int SALARY = AttributesEnum.Salary.index();
    public static final int COMMISSIONPCT = AttributesEnum.CommissionPct.index();
    public static final int MANAGERID = AttributesEnum.ManagerId.index();
    public static final int DEPARTMENTID = AttributesEnum.DepartmentId.index();
    public static final int EMAILSEC = AttributesEnum.emailsec.index();
    public static final int EMPLOYEESEO = AttributesEnum.EmployeesEO.index();
    public static final int MANAGERIDEMPLOYEESEO = AttributesEnum.ManagerIdEmployeesEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public EmployeesEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject =
                    EntityDefImpl.findDefObject("com.virtual7.entityValidaiton.model.entities.EmployeesEO");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for EmployeeId, using the alias name EmployeeId.
     * @return the EmployeeId
     */
    public Number getEmployeeId() {
        return (Number)getAttributeInternal(EMPLOYEEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmployeeId.
     * @param value value to set the EmployeeId
     */
    public void setEmployeeId(Number value) {
        setAttributeInternal(EMPLOYEEID, value);
    }

    /**
     * Gets the attribute value for FirstName, using the alias name FirstName.
     * @return the FirstName
     */
    public String getFirstName() {
        return (String)getAttributeInternal(FIRSTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for FirstName.
     * @param value value to set the FirstName
     */
    public void setFirstName(String value) {
        setAttributeInternal(FIRSTNAME, value);
    }

    /**
     * Gets the attribute value for LastName, using the alias name LastName.
     * @return the LastName
     */
    public String getLastName() {
        return (String)getAttributeInternal(LASTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastName.
     * @param value value to set the LastName
     */
    public void setLastName(String value) {
        setAttributeInternal(LASTNAME, value);
    }

    /**
     * Gets the attribute value for Email, using the alias name Email.
     * @return the Email
     */
    public String getEmail() {
        return (String)getAttributeInternal(EMAIL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Email.
     * @param value value to set the Email
     */
    public void setEmail(String value) {
        setAttributeInternal(EMAIL, value);
    }

    /**
     * Gets the attribute value for PhoneNumber, using the alias name PhoneNumber.
     * @return the PhoneNumber
     */
    public String getPhoneNumber() {
        return (String)getAttributeInternal(PHONENUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for PhoneNumber.
     * @param value value to set the PhoneNumber
     */
    public void setPhoneNumber(String value) {
        setAttributeInternal(PHONENUMBER, value);
    }

    /**
     * Gets the attribute value for HireDate, using the alias name HireDate.
     * @return the HireDate
     */
    public Date getHireDate() {
        return (Date)getAttributeInternal(HIREDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for HireDate.
     * @param value value to set the HireDate
     */
    public void setHireDate(Date value) {
        setAttributeInternal(HIREDATE, value);
    }

    /**
     * Gets the attribute value for JobId, using the alias name JobId.
     * @return the JobId
     */
    public String getJobId() {
        return (String)getAttributeInternal(JOBID);
    }

    /**
     * Sets <code>value</code> as the attribute value for JobId.
     * @param value value to set the JobId
     */
    public void setJobId(String value) {
        setAttributeInternal(JOBID, value);
    }

    /**
     * Gets the attribute value for Salary, using the alias name Salary.
     * @return the Salary
     */
    public Number getSalary() {
        return (Number)getAttributeInternal(SALARY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Salary.
     * @param value value to set the Salary
     */
    public void setSalary(Number value) {
        setAttributeInternal(SALARY, value);
    }

    /**
     * Gets the attribute value for CommissionPct, using the alias name CommissionPct.
     * @return the CommissionPct
     */
    public Number getCommissionPct() {
        return (Number)getAttributeInternal(COMMISSIONPCT);
    }

    /**
     * Sets <code>value</code> as the attribute value for CommissionPct.
     * @param value value to set the CommissionPct
     */
    public void setCommissionPct(Number value) {
        setAttributeInternal(COMMISSIONPCT, value);
    }

    /**
     * Gets the attribute value for ManagerId, using the alias name ManagerId.
     * @return the ManagerId
     */
    public Number getManagerId() {
        return (Number)getAttributeInternal(MANAGERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ManagerId.
     * @param value value to set the ManagerId
     */
    public void setManagerId(Number value) {
        setAttributeInternal(MANAGERID, value);
    }

    /**
     * Gets the attribute value for DepartmentId, using the alias name DepartmentId.
     * @return the DepartmentId
     */
    public Number getDepartmentId() {
        return (Number)getAttributeInternal(DEPARTMENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepartmentId.
     * @param value value to set the DepartmentId
     */
    public void setDepartmentId(Number value) {
        setAttributeInternal(DEPARTMENTID, value);
    }


    /**
     * Gets the attribute value for emailsec, using the alias name emailsec.
     * @return the emailsec
     */
    public String getemailsec() {
        if ((String)getAttributeInternal(EMAILSEC) == null) {
            this.setemailsec(this.getEmail());
            return this.getEmail();
        }
        return (String)getAttributeInternal(EMAILSEC);
    }

    @Override
    public void afterCommit(TransactionEvent e) {
        this.setemailsec(null);
    }


    /**
     * Sets <code>value</code> as the attribute value for emailsec.
     * @param value value to set the emailsec
     */
    public void setemailsec(String value) {
        setAttributeInternal(EMAILSEC, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getEmployeesEO() {
        return (RowIterator)getAttributeInternal(EMPLOYEESEO);
    }

    /**
     * @return the associated entity EmployeesEOImpl.
     */
    public EmployeesEOImpl getManagerIdEmployeesEO() {
        return (EmployeesEOImpl)getAttributeInternal(MANAGERIDEMPLOYEESEO);
    }

    /**
     * Sets <code>value</code> as the associated entity EmployeesEOImpl.
     */
    public void setManagerIdEmployeesEO(EmployeesEOImpl value) {
        setAttributeInternal(MANAGERIDEMPLOYEESEO, value);
    }

    /**
     * @param employeeId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number employeeId) {
        return new Key(new Object[] { employeeId });
    }


}
