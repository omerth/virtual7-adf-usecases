package com.virtual7.pdfGenerator.model;

import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;

import com.virtual7.pdfGenerator.model.common.EmployeesAppModule;

import com.virtual7.pdfGenerator.model.pdf.XmlStringGenerator;

import com.virtual7.pdfGenerator.model.views.EmployeesVOImpl;

import java.io.File;

import java.io.OutputStream;

import java.io.StringReader;

import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;

import javax.xml.transform.sax.SAXResult;
import javax.xml.transform.stream.StreamSource;

import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.fop.apps.FOUserAgent;
import org.apache.fop.apps.Fop;
import org.apache.fop.apps.FopFactory;
import org.apache.fop.apps.MimeConstants;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Sep 20 18:11:01 EEST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EmployeesAppModuleImpl extends ApplicationModuleImpl implements EmployeesAppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public EmployeesAppModuleImpl() {
    }

    /**
     * Generates a PDF file containing a table with the employee first name and last name.
     */
    public void generatePDF() {
        try {
            String xml = XmlStringGenerator.generateXMLString(getEmployeesVO());
                
            System.out.println("FOP ExampleXML2PDF\n");
            System.out.println("Preparing...");

            // Setup directories
            File baseDir = new File("C:\\Users\\bolat\\Desktop\\tmp\\");
            File outDir = new File(baseDir, "out");
            outDir.mkdirs();

            // Setup input and output files
            File xsltfile = new File(baseDir, "employeesData2.xsl");
            File pdffile = new File(outDir, "Employees2PDF.pdf");

            System.out.println("Stylesheet: " + xsltfile);
            System.out.println("Output: PDF (" + pdffile + ")");
            System.out.println();
            System.out.println("Transforming...");

            // configure fopFactory as desired
            FopFactory fopFactory = FopFactory.newInstance();

            FOUserAgent foUserAgent = fopFactory.newFOUserAgent();
            // configure foUserAgent as desired

            // Setup output
            OutputStream out = new java.io.FileOutputStream(pdffile);
            out = new java.io.BufferedOutputStream(out);

            try {
                // Construct fop with desired output format
                Fop fop = fopFactory.newFop(MimeConstants.MIME_PDF, foUserAgent, out);

                // Setup XSLT
                TransformerFactory factory = new TransformerFactoryImpl();
                Transformer transformer = factory.newTransformer(new StreamSource(xsltfile));

                // Setup input for XSLT transformation
                Source src = new StreamSource(new StringReader(xml));

                // Resulting SAX events (the generated FO) must be piped through to FOP
                Result res = new SAXResult(fop.getDefaultHandler());

                // Start XSLT transformation and FOP processing
                transformer.transform(src, res);
            } finally {
                out.close();
            }
            
            System.out.println("Success!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Container's getter for EmployeesVO.
     * @return EmployeesVO
     */
    public ViewObjectImpl getEmployeesVO() {
        return (ViewObjectImpl)findViewObject("EmployeesVO");
    }
}
